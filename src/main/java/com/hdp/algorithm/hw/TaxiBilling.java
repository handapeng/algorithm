package com.hdp.algorithm.hw;

import java.util.Scanner;

/**
 * @author HDP
 * @ClassName: Jump
 * @Description:出租车计费
 * 任何数字位置遇到数字 4 就直接跳过，其余功能都正常。
 * 输入描述:只有一行，数字 N，表示里程表的读数。
 * 输出描述:一个数字，表示实际产生的费用。以回车结束。
 * 输入：17
 * 输出：15
 * 说明：17 表示计费表的表面读数。15 表示实际产生的费用其实只有 15 块钱。
 * 5 # 4
 * 17 # 15
 * 100 # 81
 * @date 2023/2/9 18:29
 */
public class TaxiBilling {
        public static void main(String[] args) {
            Scanner in = new Scanner(System.in);
            while (in.hasNext()) {
                int N = in.nextInt();
                /*首先假定N是一位数，只有个位，那么N<4的话直接输出N，9>N>4输出N-1
                 * ---假定N是两位数，先判断个位是否大于4，大于的话说明至少跳1次，说明在个位时的1不能写死，应该
                 * 定义一个变量j=1,而j=1不是一成不变的，因为两位数有可能是50以上，如此就将40~49全部跳过，跳了10次
                 * 在判断两位数时有两种情况，一种是小于40的，一种是大于49的，和一位数判断一样，都是与4作比较，所以N的
                 * 十位数要移动到个位上，所以在循环内执行体执行完成后，N=N/10,以新的N值进入下一次循环，就可以对原N的十
                 * 位数进行判断了：
                 *    如果大于4，说明原N是至少50起步的，(现在假定N=50)跳了4,14,24,34,40~49共14次，也就
                 * 是4+10，之前说过在原N大于49情况下，40~49是必定跳过的，所以此处j就不能是1了，应该变成10,其实就是j*10
                 * 那么在执行体结束后j的值就要重新赋值以准备开始下次循环，所以j=j*10，且temp=temp+N%10-1+j
                 *
                 *    如果小于4，说明原N是小于40的，如果是32，跳了4,14,24共3次，如果是35，跳了4,14,24,34共4次，因为在
                 *个位时已经判断是否大于4了，大于就至少跳一次，temp在那时就已经被赋值为1了，不大于4，temp还是0
                 *所以公式应为：temp=temp+n%10
                 *---假定N是三位数，二位数的判断规则就不适用了，因为三位数要进行三次循环N值才失去意义变为0，而二位数只需要
                 *两次，一位数一次就够了，所以还要在二位数判断规则上附加变量，假设N是100，跳了4,14,24,34,40~49,54,64,74,84,94
                 *共19次,开始找规律，N=10时，跳了4共1次，N=1时，跳了0次,
                 *一位数循环1次，k最大为1，二位数循环2次，k最大为{一位数k值*9+（40~49也就是j累乘1次10后的结果：10）}，三位数循环3次
                 *k最大为{二位数k值*9+（在第二次循环时，j累乘2次10后的结果：100）}，四位数，五位数推导过程相同，j的规律就是数字的位数*10，
                 *再循环里表示为j在循环体最后累乘10
                 * */
                int ans = N, temp = 0, k = 0, j = 1;
                while (N > 0) {						//	100	10			1
                    if (N % 10 > 4) {
                        temp += (N % 10 - 1) * k + j;
                    } else {
                        temp += (N % 10) * k;		//	0	0			1*19
                    }
                    k = k * 9 + j;					//	1	1*9+10=19
                    j *= 10;						//	10	100
                    N /= 10;						//	10	1
                }
                System.out.println(ans - temp);
            }
        }

}
